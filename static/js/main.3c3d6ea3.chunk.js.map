{"version":3,"sources":["activeTickets.js","myPayments.js","myPoints.js","editProfile.js","defaultPage.js","LoadingPage.js","App.js","serviceWorker.js","index.js"],"names":["ActiveTickets","props","className","user","MyPayments","MyPoints","EditProfile","DefaultPage","LoadingPage","handleClick","bind","this","handler","choice","page_id","Button","onClick","React","Component","App","state","id_page","user_name","e","id","setState","type","Row","Col","xs","src","alt","variant","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3c3d6ea3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ActiveTickets(props) {\n    return (\n        <div className=\"header rounded col-md-12\">\n            <h1>To jest strona aktywnych biletów</h1>\n            Hej: {props.user}\n        </div>\n    )\n}\nexport default ActiveTickets;","import React from 'react';\n\nfunction MyPayments(props) {\n    return (\n        <div className=\"header rounded col-md-12\">\n            <h1>To jest strona moich płatności</h1>\n            Hej: {props.user}\n        </div>\n    )\n}\nexport default MyPayments;","import React from 'react';\n\nfunction MyPoints(props) {\n    return (\n        <div className=\"header rounded col-md-12\">\n            <h1>To jest strona moich punktów</h1>\n            Hej: {props.user}\n        </div>\n    )\n}\nexport default MyPoints;","import React from 'react';\n\nfunction EditProfile(props) {\n    return (\n        <div className=\"header rounded col-md-12\">\n            <h1>To jest strona edycji profilu</h1>\n            Hej: {props.user}\n        </div>\n    )\n}\nexport default EditProfile;","import React from 'react';\n\nfunction DefaultPage(props) {\n    return (\n        <div className=\"header rounded col-md-12\">\n            <h1>To jest strona domyślna</h1>\n            Hej: {props.user}\n        </div>\n    )\n}\nexport default DefaultPage;","import React from 'react';\n\nimport {Button} from 'react-bootstrap';\nimport ActiveTickets from './activeTickets';\nimport MyPayments from './myPayments';\nimport MyPoinst from './myPoints';\nimport EditProfile from './editProfile';\nimport DefaultPage from './defaultPage';\n\nclass LoadingPage extends React.Component {\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick() {\n        this.props.handler();\n    }\n    render() {\n        let choice = '';\n\n        if (this.props.page_id === 0) {\n            choice = <div><ActiveTickets user={this.props.user}/><Button onClick={this.handleClick}>Wróć</Button></div>\n        }\n        else if (this.props.page_id === 1) {\n            choice = <div><MyPayments user={this.props.user}/><Button onClick={this.handleClick}>Wróć</Button></div>\n        }\n        else if (this.props.page_id === 2) {\n            choice = <div><MyPoinst user={this.props.user}/><Button onClick={this.handleClick}>Wróć</Button></div>\n        }\n        else if (this.props.page_id === 3) {\n            choice = <div><EditProfile user={this.props.user}/><Button onClick={this.handleClick}>Wróć</Button></div>\n        }\n        else {\n            choice = <div><DefaultPage user={this.props.user}/></div>\n        }\n\n        return (\n            <div className=\"header rounded col-md-12\">\n                {choice}\n            </div>\n        );\n    }\n}\nexport default LoadingPage;","import React from 'react';\nimport './App.css';\nimport {Button, Col, Row} from 'react-bootstrap';\nimport LoadingPage from './LoadingPage';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id_page: '',\n      user_name: \"Daria\"\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handler = this.handler.bind(this);\n  }\n\n  handleClick(e, id){\n    this.setState(state => ({\n      id_page: id\n    }));\n  }\n  handler() {\n    this.setState(state => ({\n      id_page: ''\n    }));\n  }\n\n  render() {\n    return(\n    <div className=\"App\">\n      <style type=\"text/css\">\n        {`\n        .btn-flat {\n          background-color: #1592E6;\n          color: white; \n          border-radius: 0;\n          width: 250px !important;\n          margin: auto;\n        }\n        .btn-flat:hover {\n          background-color: #003058;\n          color: white;\n        }\n\n        .btn-xxl {\n          padding: 1rem 1.5rem;\n          font-size: 1.5rem;\n        }\n        .change_color {\n          background-color: #003058;\n          color: white;\n        }\n        `}\n      </style>\n      <header className=\"App-header\">\n        <Row className=\"vertical-divider container-fluid\">\n          <Col xs={4}>\n            <img src=\"user.png\" className=\"img-thumbnail\" alt=\"user_image\"/>\n            <div className=\"mb-2\">{this.state.user_name}</div>\n            <div className=\"mb-2\">\n              <Button className={this.state.id_page===0 ? 'change_color': null} variant=\"flat\" value=\"0\" onClick={e => this.handleClick(e, 0)}>\n                Aktywne bilety\n              </Button>\n            </div>\n            <div className=\"mb-2\">\n              <Button className={this.state.id_page===1 ? 'change_color': null} variant=\"flat\" value=\"1\" onClick={e => this.handleClick(e, 1)}>\n                Moje płatności\n              </Button>\n            </div>\n            <div className=\"mb-2\">\n              <Button className={this.state.id_page===2 ? 'change_color': null} variant=\"flat\" value=\"2\" onClick={e => this.handleClick(e, 2)}>\n                Moje punkty\n              </Button>\n            </div>\n            <div className=\"mb-2\">\n              <Button className={this.state.id_page===3 ? 'change_color': null} variant=\"flat\" value=\"3\" onClick={e => this.handleClick(e, 3)}>\n                Edytuj profil\n              </Button>\n            </div>\n          </Col>\n          <Col xs={8}>\n            <LoadingPage user={this.state.user_name} page_id={this.state.id_page} handler={this.handler}/>\n          </Col>\n        </Row>\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}